{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kwa\\\\projects\\\\tattools-rn\\\\BabylonjsDemo\\\\components\\\\SceneComp2.js\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AssetUtils from 'expo-asset-utils';\nimport { Asset } from 'react-native-unimodules';\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture';\nimport { CubeTexture } from '@babylonjs/core/Materials/Textures/cubeTexture';\nimport '@babylonjs/core/Materials/Textures/Loaders/ddsTextureLoader';\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport \"@babylonjs/core/Meshes/meshBuilder\";\nimport '@babylonjs/core/Materials/standardMaterial';\nimport SceneTemplate from \"../SceneTemplate\";\n\nvar SceneComp2 = function (_React$Component) {\n  _inherits(SceneComp2, _React$Component);\n\n  function SceneComp2() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SceneComp2);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SceneComp2)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onInitScene = function _callee(scene) {\n      var camera, light, envTexture, urlBRDF, assetBRDF, envBRDFTexture, url, asset, texture, material, ground, material2, sphere;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              camera = new ArcRotateCamera(\"ArcRotateCamera\", 2, 1, 15, new Vector3(0, 0, 0), scene);\n              camera.upperBetaLimit = Math.PI / 2;\n              camera.lowerRadiusLimit = 5;\n              camera.upperRadiusLimit = 25;\n              light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\n              light.intensity = 0.7;\n              envTexture = CubeTexture.CreateFromPrefilteredData('https://playground.babylonjs.com/textures/environment.dds', scene);\n              envTexture.name = \"envTex\";\n              envTexture.gammaSpace = false;\n              scene.environmentTexture = envTexture;\n              urlBRDF = 'https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png';\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(AssetUtils.resolveAsync(urlBRDF));\n\n            case 13:\n              assetBRDF = _context.sent;\n              envBRDFTexture = Texture.LoadFromDataString(\"image\", assetBRDF, scene, true, true, true, Texture.BILINEAR_SAMPLINGMODE);\n              envBRDFTexture.isRGBD = true;\n              scene.environmentBRDFTexture = envBRDFTexture;\n              url = Asset.fromModule(require(\"../assets/grass.jpg\"));\n              _context.next = 20;\n              return _regeneratorRuntime.awrap(url.downloadAsync());\n\n            case 20:\n              _context.next = 22;\n              return _regeneratorRuntime.awrap(AssetUtils.resolveAsync(url.localUri));\n\n            case 22:\n              asset = _context.sent;\n              texture = Texture.LoadFromDataString(\"image\", asset, scene, true);\n              material = new PBRMaterial(\"ground\", scene);\n              material.albedoTexture = texture;\n              material.roughness = 0.5;\n              material.metallic = 0.5;\n              ground = Mesh.CreateGround(\"ground1\", 6, 6, 1, scene);\n              ground.scaling.x = 1.5;\n              ground.material = material;\n              material2 = new PBRMaterial(\"glass\", scene);\n              material2.indexOfRefraction = 0.52;\n              material2.alpha = 0.5;\n              material2.microSurface = 1;\n              material2.reflectivityColor = new Color3(0.2, 0.2, 0.2);\n              material2.albedoColor = new Color3(0.4, 0.4, 0.4);\n              sphere = Mesh.CreateSphere(\"sphere1\", 16, 2, scene);\n              sphere.material = material2;\n              scene.registerBeforeRender(function () {\n                ground.rotation.y += 0.01;\n                sphere.rotation.y += 0.01;\n              });\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SceneComp2, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        }\n      }, this.props.name), React.createElement(SceneTemplate, {\n        onInitScene: this.onInitScene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        }\n      }));\n    }\n  }]);\n\n  return SceneComp2;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 15\n  }\n});\nexport default SceneComp2;","map":{"version":3,"sources":["C:/Users/kwa/projects/tattools-rn/BabylonjsDemo/components/SceneComp2.js"],"names":["React","AssetUtils","Asset","ArcRotateCamera","HemisphericLight","Vector3","Color3","Texture","CubeTexture","Mesh","PBRMaterial","SceneTemplate","SceneComp2","onInitScene","scene","camera","upperBetaLimit","Math","PI","lowerRadiusLimit","upperRadiusLimit","light","intensity","envTexture","CreateFromPrefilteredData","name","gammaSpace","environmentTexture","urlBRDF","resolveAsync","assetBRDF","envBRDFTexture","LoadFromDataString","BILINEAR_SAMPLINGMODE","isRGBD","environmentBRDFTexture","url","fromModule","require","downloadAsync","localUri","asset","texture","material","albedoTexture","roughness","metallic","ground","CreateGround","scaling","x","material2","indexOfRefraction","alpha","microSurface","reflectivityColor","albedoColor","sphere","CreateSphere","registerBeforeRender","rotation","y","styles","container","props","Component","StyleSheet","create","flex","padding"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport AssetUtils from 'expo-asset-utils';\r\nimport { Asset } from 'react-native-unimodules';\r\n// import { readAsStringAsync } from 'expo-file-system';\r\n\r\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\n\r\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture';\r\nimport { CubeTexture } from '@babylonjs/core/Materials/Textures/cubeTexture';\r\nimport '@babylonjs/core/Materials/Textures/Loaders/ddsTextureLoader';\r\n\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\r\nimport \"@babylonjs/core/Meshes/meshBuilder\";\r\nimport '@babylonjs/core/Materials/standardMaterial';\r\n\r\nimport SceneTemplate from '../SceneTemplate';\r\n\r\nclass SceneComp2 extends React.Component {\r\n  onInitScene = async (scene) => {\r\n    // This creates and positions an arcRotate camera\r\n    const camera = new ArcRotateCamera(\"ArcRotateCamera\", 2, 1, 15, new Vector3(0, 0, 0), scene);\r\n    camera.upperBetaLimit = Math.PI / 2;\r\n    camera.lowerRadiusLimit = 5;\r\n    camera.upperRadiusLimit = 25;\r\n       \r\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n    const light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\r\n    light.intensity = 0.7; \r\n\r\n    // Add the environment manually, instead of createDefaultEnvironment function- use Image tag\r\n    const envTexture = CubeTexture.CreateFromPrefilteredData('https://playground.babylonjs.com/textures/environment.dds', scene);\r\n    envTexture.name = \"envTex\";\r\n    envTexture.gammaSpace = false;\r\n    scene.environmentTexture = envTexture;\r\n\r\n    // Add environmentBRDFTexture to avoid calling GetEnvironmentBRDFTexture internally- use Image tag\r\n    const urlBRDF = 'https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png';\r\n    const assetBRDF = await AssetUtils.resolveAsync(urlBRDF);\r\n    const envBRDFTexture = Texture.LoadFromDataString(\"image\", assetBRDF, scene, true,true,true, Texture.BILINEAR_SAMPLINGMODE);\r\n    envBRDFTexture.isRGBD = true;\r\n    scene.environmentBRDFTexture = envBRDFTexture;\r\n   \r\n    // Load the image from server \r\n    // const url = 'https://playground.babylonjs.com/textures/grass.jpg';\r\n    // const asset = await AssetUtils.resolveAsync(url);\r\n   \r\n    // Load the image from local folder\r\n    const url = Asset.fromModule(require('../assets/grass.jpg'));\r\n    await url.downloadAsync();\r\n    const asset = await AssetUtils.resolveAsync(url.localUri);\r\n\r\n    // Create the texture\r\n    const texture = Texture.LoadFromDataString(\"image\", asset, scene, true);\r\n \r\n    // Create a pbr material\r\n    const material = new PBRMaterial(\"ground\", scene);\r\n    material.albedoTexture = texture;\r\n    material.roughness = 0.5;\r\n    material.metallic = 0.5;\r\n\r\n    // Our built-in 'ground' shape. Params: name, width, depth, subdivs, scene\r\n    const ground = Mesh.CreateGround(\"ground1\", 6, 6, 1, scene);\r\n    ground.scaling.x = 1.5;\r\n \r\n    // attach the material to ground \r\n    ground.material = material;\r\n\r\n    // Create a pbr material\r\n    const material2 = new PBRMaterial(\"glass\", scene);\r\n    material2.indexOfRefraction = 0.52;\r\n    material2.alpha = 0.5;\r\n    material2.microSurface = 1;\r\n    material2.reflectivityColor = new Color3(0.2, 0.2, 0.2);\r\n    material2.albedoColor = new Color3(0.4, 0.4, 0.4);\r\n\r\n    // Our built-in 'sphere' shape. Params: name, subdivs, size, scene\r\n    const sphere = Mesh.CreateSphere(\"sphere1\", 16, 2, scene);\r\n\r\n    // attach the material to sphere\r\n    sphere.material = material2;\r\n\r\n    scene.registerBeforeRender(() => {\r\n      ground.rotation.y += 0.01;\r\n      sphere.rotation.y += 0.01;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={ styles.container }>\r\n        <Text>{ this.props.name }</Text>\r\n        <SceneTemplate onInitScene={ this.onInitScene }/>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({  \r\n  container: {  \r\n    flex: 1,  \r\n    padding: 15\r\n  }\r\n});  \r\n\r\nexport default SceneComp2;"]},"metadata":{},"sourceType":"module"}