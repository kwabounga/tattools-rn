{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kwa\\\\projects\\\\tattools-rn\\\\BabylonjsDemo\\\\SceneTemplate.js\";\nimport React from 'react';\nimport { GLView } from 'expo-gl';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { PanGestureHandler, PinchGestureHandler, State } from 'react-native-gesture-handler';\nimport ExpoEngine from \"./ExpoEngine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { Database } from \"@babylonjs/core/Offline/database\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\n\nvar SceneTemplate = function (_React$Component) {\n  _inherits(SceneTemplate, _React$Component);\n\n  function SceneTemplate(props) {\n    var _this;\n\n    _classCallCheck(this, SceneTemplate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SceneTemplate).call(this, props));\n\n    _this._onPanGestureEvent = function (e) {\n      _this._translateX = e.nativeEvent.velocityX;\n      _this._translateY = e.nativeEvent.velocityY;\n    };\n\n    _this._onHandlePanStateChange = function (e) {\n      switch (e.nativeEvent.state) {\n        case State.ACTIVE:\n        case State.BEGAN:\n          _this.updatePan = true;\n          break;\n\n        case State.END:\n        case State.CANCELLED:\n        case State.FAILED:\n          _this.updatePan = false;\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._onPinchGestureEvent = function (e) {\n      _this._scale = e.nativeEvent.velocity;\n    };\n\n    _this._onHandlePinchStateChange = function (e) {\n      switch (e.nativeEvent.state) {\n        case State.ACTIVE:\n        case State.BEGAN:\n          _this.updatePinch = true;\n          break;\n\n        case State.END:\n        case State.CANCELLED:\n        case State.FAILED:\n          _this.updatePinch = false;\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._onGLContextCreate = function _callee(gl) {\n      var engine, scene;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              engine = new ExpoEngine(gl, true, {}, false);\n              SceneLoader.ShowLoadingScreen = false;\n              SceneLoader.CleanBoneMatrixWeights = true;\n              Database.IDBStorageEnabled = false;\n              scene = new Scene(engine);\n\n              _this.props.onInitScene(scene);\n\n              scene.registerBeforeRender(function () {\n                if (_this.updatePan) {\n                  scene.activeCamera.alpha -= _this._translateX / 6000;\n                  scene.activeCamera.beta -= _this._translateY / 6000;\n                }\n\n                if (_this.updatePinch) {\n                  scene.activeCamera.radius -= _this._scale * 60;\n                }\n\n                gl.endFrameEXP();\n              });\n              engine.runRenderLoop(function () {\n                if (scene) {\n                  scene.render();\n                }\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this._translateX = 0;\n    _this._translateY = 0;\n    _this._scale = 0;\n    _this.updatePan = false;\n    _this.updatePinch = false;\n    return _this;\n  }\n\n  _createClass(SceneTemplate, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentDidUnmount\",\n    value: function componentDidUnmount() {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PanGestureHandler, {\n        minPointers: 1,\n        maxPointers: 2,\n        onGestureEvent: this._onPanGestureEvent,\n        onHandlerStateChange: this._onHandlePanStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      }, React.createElement(PinchGestureHandler, {\n        onGestureEvent: this._onPinchGestureEvent,\n        onHandlerStateChange: this._onHandlePinchStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        }\n      }, React.createElement(GLView, {\n        style: styles.container,\n        onContextCreate: this._onGLContextCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        }\n      })));\n    }\n  }]);\n\n  return SceneTemplate;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: 300,\n    height: 300\n  }\n});\nexport default SceneTemplate;","map":{"version":3,"sources":["C:/Users/kwa/projects/tattools-rn/BabylonjsDemo/SceneTemplate.js"],"names":["React","GLView","PanGestureHandler","PinchGestureHandler","State","ExpoEngine","Scene","Database","SceneLoader","SceneTemplate","props","_onPanGestureEvent","e","_translateX","nativeEvent","velocityX","_translateY","velocityY","_onHandlePanStateChange","state","ACTIVE","BEGAN","updatePan","END","CANCELLED","FAILED","_onPinchGestureEvent","_scale","velocity","_onHandlePinchStateChange","updatePinch","_onGLContextCreate","gl","engine","ShowLoadingScreen","CleanBoneMatrixWeights","IDBStorageEnabled","scene","onInitScene","registerBeforeRender","activeCamera","alpha","beta","radius","endFrameEXP","runRenderLoop","render","styles","container","Component","StyleSheet","create","flex","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { GLView } from 'expo-gl';\r\nimport { StyleSheet } from 'react-native';\r\nimport { PanGestureHandler, PinchGestureHandler, State } from 'react-native-gesture-handler';\r\n\r\nimport ExpoEngine from \"./ExpoEngine\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Database } from \"@babylonjs/core/Offline/database\";\r\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\r\n\r\nclass SceneTemplate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this._translateX = 0;\r\n        this._translateY = 0;\r\n        this._scale = 0;\r\n\r\n        this.updatePan = false;\r\n        this.updatePinch = false;\r\n    }\r\n\r\n    _onPanGestureEvent = e => {\r\n        this._translateX = e.nativeEvent.velocityX;\r\n        this._translateY = e.nativeEvent.velocityY;\r\n    }\r\n\r\n    _onHandlePanStateChange = e => {\r\n        switch (e.nativeEvent.state) {\r\n            case State.ACTIVE:\r\n            case State.BEGAN:\r\n                this.updatePan = true;\r\n                break;\r\n            case State.END:\r\n            case State.CANCELLED:\r\n            case State.FAILED:\r\n                this.updatePan = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    _onPinchGestureEvent = e => {\r\n        this._scale = e.nativeEvent.velocity;\r\n    }\r\n\r\n    _onHandlePinchStateChange = e => {\r\n        switch (e.nativeEvent.state) {\r\n            case State.ACTIVE:\r\n            case State.BEGAN:\r\n                this.updatePinch = true;\r\n                break;\r\n            case State.END:\r\n            case State.CANCELLED:\r\n            case State.FAILED:\r\n                this.updatePinch = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    componentDidMount () {};\r\n\r\n    componentDidUnmount () {};\r\n\r\n    componentDidMount() {};\r\n\r\n    _onGLContextCreate = async gl => {\r\n        // Get the gl context and associate a Babylon Engine to it.\r\n        const engine = new ExpoEngine(gl, true, {}, false);\r\n        \r\n        // Disable LoadingScreen and IDBStorage\r\n        SceneLoader.ShowLoadingScreen = false;\r\n        SceneLoader.CleanBoneMatrixWeights = true;\r\n        Database.IDBStorageEnabled = false;\r\n\r\n        // Create our first scene\r\n        const scene = new Scene(engine);\r\n\r\n        // inject more functions\r\n        this.props.onInitScene(scene);\r\n\r\n        scene.registerBeforeRender(() => {\r\n            if (this.updatePan) {\r\n                scene.activeCamera.alpha -= this._translateX / 6000;\r\n                scene.activeCamera.beta -= this._translateY / 6000;\r\n            }\r\n            if (this.updatePinch) {\r\n                scene.activeCamera.radius -= this._scale * 60;\r\n            }\r\n\r\n            gl.endFrameEXP(); \r\n        });\r\n\r\n        engine.runRenderLoop(() => {\r\n            if (scene) {\r\n                scene.render();\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <PanGestureHandler\r\n                minPointers = { 1 }\r\n                maxPointers = { 2 }\r\n                onGestureEvent={ this._onPanGestureEvent }\r\n                onHandlerStateChange={ this._onHandlePanStateChange }>\r\n                   <PinchGestureHandler\r\n                        onGestureEvent={ this._onPinchGestureEvent }\r\n                        onHandlerStateChange={ this._onHandlePinchStateChange }>\r\n                        <GLView\r\n                            style={ styles.container }\r\n                            onContextCreate={ this._onGLContextCreate }\r\n                        />\r\n                    </PinchGestureHandler> \r\n            </PanGestureHandler>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({  \r\n    container: {  \r\n      flex: 1,   \r\n      width: 300, \r\n      height: 300\r\n    }\r\n});  \r\n\r\nexport default SceneTemplate;"]},"metadata":{},"sourceType":"module"}