{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kwa\\\\projects\\\\tattools-rn\\\\BabylonjsDemo\\\\node_modules\\\\expo-gl\\\\build\\\\GLView.web.js\";\nimport invariant from 'invariant';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { UnavailabilityError, CodedError } from '@unimodules/core';\n\nfunction getImageForAsset(asset) {\n  if (asset != null && typeof asset === 'object' && asset !== null && asset.downloadAsync) {\n    var dataURI = asset.localUri || asset.uri || '';\n    var image = new Image();\n    image.src = dataURI;\n    return image;\n  }\n\n  return asset;\n}\n\nfunction asExpoContext(gl) {\n  gl.endFrameEXP = function glEndFrameEXP() {};\n\n  if (!gl['_expo_texImage2D']) {\n    gl['_expo_texImage2D'] = gl.texImage2D;\n\n    gl.texImage2D = function () {\n      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n        props[_key] = arguments[_key];\n      }\n\n      var nextProps = [].concat(props);\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texImage2D'].apply(gl, _toConsumableArray(nextProps));\n    };\n  }\n\n  if (!gl['_expo_texSubImage2D']) {\n    gl['_expo_texSubImage2D'] = gl.texSubImage2D;\n\n    gl.texSubImage2D = function () {\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      var nextProps = [].concat(props);\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texSubImage2D'].apply(gl, _toConsumableArray(nextProps));\n    };\n  }\n\n  return gl;\n}\n\nfunction ensureContext(canvas, contextAttributes) {\n  if (!canvas) {\n    throw new CodedError('ERR_GL_INVALID', 'Attempting to use the GL context before it has been created.');\n  }\n\n  var context = canvas.getContext('webgl', contextAttributes) || canvas.getContext('webgl-experimental', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n  invariant(context, 'Browser does not support WebGL');\n  return asExpoContext(context);\n}\n\nfunction stripNonDOMProps(props) {\n  for (var k in propTypes) {\n    if (k in props) {\n      delete props[k];\n    }\n  }\n\n  return props;\n}\n\nvar propTypes = {\n  onContextCreate: PropTypes.func.isRequired,\n  onContextRestored: PropTypes.func,\n  onContextLost: PropTypes.func,\n  webglContextAttributes: PropTypes.object\n};\nexport var GLView = function (_React$Component) {\n  _inherits(GLView, _React$Component);\n\n  function GLView() {\n    var _this;\n\n    _classCallCheck(this, GLView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GLView).apply(this, arguments));\n    _this.state = {\n      width: 0,\n      height: 0\n    };\n    _this._hasContextBeenCreated = false;\n\n    _this._contextCreated = function () {\n      _this.gl = _this._createContext();\n\n      _this.props.onContextCreate(_this.gl);\n\n      if (_this.canvas) {\n        _this.canvas.addEventListener('webglcontextlost', _this._contextLost);\n\n        _this.canvas.addEventListener('webglcontextrestored', _this._contextRestored);\n      }\n    };\n\n    _this._updateLayout = function () {\n      if (_this.container) {\n        var _this$container = _this.container,\n            _this$container$clien = _this$container.clientWidth,\n            width = _this$container$clien === void 0 ? 0 : _this$container$clien,\n            _this$container$clien2 = _this$container.clientHeight,\n            height = _this$container$clien2 === void 0 ? 0 : _this$container$clien2;\n\n        _this.setState({\n          width: width,\n          height: height\n        });\n      }\n    };\n\n    _this._contextLost = function (event) {\n      event.preventDefault();\n      _this.gl = undefined;\n\n      if (_this.props.onContextLost) {\n        _this.props.onContextLost();\n      }\n    };\n\n    _this._contextRestored = function () {\n      if (_this.props.onContextRestored) {\n        _this.gl = _this._createContext();\n\n        _this.props.onContextRestored(_this.gl);\n      }\n    };\n\n    _this._assignCanvasRef = function (canvas) {\n      _this.canvas = canvas;\n    };\n\n    _this._assignContainerRef = function (element) {\n      if (element) {\n        _this.container = element;\n      } else {\n        _this.container = undefined;\n      }\n\n      _this._updateLayout();\n    };\n\n    return _this;\n  }\n\n  _createClass(GLView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (window.addEventListener) {\n        window.addEventListener('resize', this._updateLayout);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.gl) {\n        var loseContextExt = this.gl.getExtension('WEBGL_lose_context');\n\n        if (loseContextExt) {\n          loseContextExt.loseContext();\n        }\n\n        this.gl = undefined;\n      }\n\n      if (this.canvas) {\n        this.canvas.removeEventListener('webglcontextlost', this._contextLost);\n        this.canvas.removeEventListener('webglcontextrestored', this._contextRestored);\n      }\n\n      window.removeEventListener('resize', this._updateLayout);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _window = window,\n          _window$devicePixelRa = _window.devicePixelRatio,\n          devicePixelRatio = _window$devicePixelRa === void 0 ? 1 : _window$devicePixelRa;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          props = _objectWithoutProperties(_this$props, [\"style\"]);\n\n      var _this$state = this.state,\n          width = _this$state.width,\n          height = _this$state.height;\n      var domProps = stripNonDOMProps(props);\n      var containerStyle = StyleSheet.flatten([{\n        flex: 1\n      }, style]);\n      return React.createElement(\"div\", {\n        ref: this._assignContainerRef,\n        style: containerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        }\n      }, React.createElement(\"canvas\", _extends({\n        ref: this._assignCanvasRef,\n        style: {\n          flex: 1,\n          width: width,\n          height: height\n        },\n        width: width * devicePixelRatio,\n        height: height * devicePixelRatio\n      }, domProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        }\n      })));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.canvas && !this._hasContextBeenCreated) {\n        this._hasContextBeenCreated = true;\n\n        this._contextCreated();\n      }\n    }\n  }, {\n    key: \"_createContext\",\n    value: function _createContext() {\n      var webglContextAttributes = this.props.webglContextAttributes;\n      var gl = ensureContext(this.canvas, webglContextAttributes);\n      this._webglContextAttributes = webglContextAttributes || {};\n      return gl;\n    }\n  }, {\n    key: \"_getGlOrReject\",\n    value: function _getGlOrReject() {\n      if (!this.gl) {\n        throw new CodedError('ERR_GL_INVALID', 'Attempting to use the GL context before it has been created.');\n      }\n\n      return this.gl;\n    }\n  }, {\n    key: \"takeSnapshotAsync\",\n    value: function takeSnapshotAsync() {\n      var options,\n          gl,\n          _args = arguments;\n      return _regeneratorRuntime.async(function takeSnapshotAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n\n              if (GLView.takeSnapshotAsync) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-gl', 'takeSnapshotAsync');\n\n            case 3:\n              gl = this._getGlOrReject();\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(GLView.takeSnapshotAsync(gl, options));\n\n            case 6:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"startARSessionAsync\",\n    value: function startARSessionAsync() {\n      return _regeneratorRuntime.async(function startARSessionAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              throw new UnavailabilityError('GLView', 'startARSessionAsync');\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"createCameraTextureAsync\",\n    value: function createCameraTextureAsync() {\n      return _regeneratorRuntime.async(function createCameraTextureAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              throw new UnavailabilityError('GLView', 'createCameraTextureAsync');\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"destroyObjectAsync\",\n    value: function destroyObjectAsync(glObject) {\n      return _regeneratorRuntime.async(function destroyObjectAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              throw new UnavailabilityError('GLView', 'destroyObjectAsync');\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    }\n  }], [{\n    key: \"createContextAsync\",\n    value: function createContextAsync() {\n      var canvas;\n      return _regeneratorRuntime.async(function createContextAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              canvas = document.createElement('canvas');\n              canvas.width = window.innerWidth * window.devicePixelRatio;\n              canvas.height = window.innerHeight * window.devicePixelRatio;\n              return _context5.abrupt(\"return\", ensureContext(canvas));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"destroyContextAsync\",\n    value: function destroyContextAsync(exgl) {\n      return _regeneratorRuntime.async(function destroyContextAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", true);\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"takeSnapshotAsync\",\n    value: function takeSnapshotAsync(exgl) {\n      var options,\n          canvas,\n          _args7 = arguments;\n      return _regeneratorRuntime.async(function takeSnapshotAsync$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n              invariant(exgl, 'GLView.takeSnapshotAsync(): canvas is not defined');\n              canvas = exgl.canvas;\n              _context7.next = 5;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                canvas.toBlob(function (blob) {\n                  resolve({\n                    uri: blob,\n                    localUri: '',\n                    width: canvas.width,\n                    height: canvas.height\n                  });\n                }, options.format, options.compress);\n              }));\n\n            case 5:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return GLView;\n}(React.Component);\nGLView.propTypes = propTypes;","map":{"version":3,"sources":["../src/GLView.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import invariant from 'invariant';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { UnavailabilityError, CodedError } from '@unimodules/core';\nimport {\n  BaseGLViewProps,\n  GLSnapshot,\n  ExpoWebGLRenderingContext,\n  SnapshotOptions,\n} from './GLView.types';\nexport { BaseGLViewProps, ExpoWebGLRenderingContext, SnapshotOptions, GLViewProps };\n\ndeclare const window: Window;\n\nfunction getImageForAsset(asset: {\n  downloadAsync: () => Promise<any>;\n  uri?: string;\n  localUri?: string;\n}): HTMLImageElement | any {\n  if (asset != null && typeof asset === 'object' && asset !== null && asset.downloadAsync) {\n    const dataURI = asset.localUri || asset.uri || '';\n    const image = new Image();\n    image.src = dataURI;\n    return image;\n  }\n  return asset;\n}\n\nfunction asExpoContext(gl: ExpoWebGLRenderingContext): WebGLRenderingContext {\n  gl.endFrameEXP = function glEndFrameEXP(): void {};\n\n  if (!gl['_expo_texImage2D']) {\n    gl['_expo_texImage2D'] = gl.texImage2D;\n    gl.texImage2D = (...props: any[]): any => {\n      let nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texImage2D'](...nextProps);\n    };\n  }\n\n  if (!gl['_expo_texSubImage2D']) {\n    gl['_expo_texSubImage2D'] = gl.texSubImage2D;\n    gl.texSubImage2D = (...props: any[]): any => {\n      let nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texSubImage2D'](...nextProps);\n    };\n  }\n\n  return gl;\n}\n\nfunction ensureContext(\n  canvas?: HTMLCanvasElement,\n  contextAttributes?: WebGLContextAttributes\n): WebGLRenderingContext {\n  if (!canvas) {\n    throw new CodedError(\n      'ERR_GL_INVALID',\n      'Attempting to use the GL context before it has been created.'\n    );\n  }\n  const context =\n    canvas.getContext('webgl', contextAttributes) ||\n    canvas.getContext('webgl-experimental', contextAttributes) ||\n    canvas.getContext('experimental-webgl', contextAttributes);\n  invariant(context, 'Browser does not support WebGL');\n  return asExpoContext(context as ExpoWebGLRenderingContext);\n}\n\nfunction stripNonDOMProps(props: { [key: string]: any }): { [key: string]: any } {\n  for (let k in propTypes) {\n    if (k in props) {\n      delete props[k];\n    }\n  }\n  return props;\n}\n\nconst propTypes = {\n  onContextCreate: PropTypes.func.isRequired,\n  onContextRestored: PropTypes.func,\n  onContextLost: PropTypes.func,\n  webglContextAttributes: PropTypes.object,\n};\n\ninterface GLViewProps extends BaseGLViewProps {\n  onContextCreate: (gl: WebGLRenderingContext) => void;\n  onContextRestored?: (gl?: WebGLRenderingContext) => void;\n  onContextLost?: () => void;\n  webglContextAttributes?: WebGLContextAttributes;\n}\n\ntype State = {\n  width: number;\n  height: number;\n};\n\nexport class GLView extends React.Component<GLViewProps, State> {\n  state = {\n    width: 0,\n    height: 0,\n  };\n\n  static propTypes = propTypes;\n\n  _hasContextBeenCreated = false;\n\n  _webglContextAttributes: WebGLContextAttributes | undefined;\n\n  canvas: HTMLCanvasElement | undefined;\n\n  container?: HTMLElement;\n\n  gl?: WebGLRenderingContext;\n\n  static async createContextAsync(): Promise<WebGLRenderingContext> {\n    const canvas = document.createElement('canvas');\n    canvas.width = window.innerWidth * window.devicePixelRatio;\n    canvas.height = window.innerHeight * window.devicePixelRatio;\n    return ensureContext(canvas);\n  }\n\n  static async destroyContextAsync(exgl?: WebGLRenderingContext | number): Promise<boolean> {\n    // Do nothing\n    return true;\n  }\n\n  static async takeSnapshotAsync(\n    exgl: WebGLRenderingContext,\n    options: SnapshotOptions = {}\n  ): Promise<GLSnapshot> {\n    invariant(exgl, 'GLView.takeSnapshotAsync(): canvas is not defined');\n    const canvas: HTMLCanvasElement = exgl.canvas;\n    return await new Promise(resolve => {\n      canvas.toBlob(\n        (blob: Blob | null) => {\n          // TODO: Bacon: Should we add data URI?\n          resolve({\n            uri: blob,\n            localUri: '',\n            width: canvas.width,\n            height: canvas.height,\n          });\n        },\n        options.format,\n        options.compress\n      );\n    });\n  }\n\n  componentDidMount() {\n    if (window.addEventListener) {\n      window.addEventListener('resize', this._updateLayout);\n    }\n  }\n\n  _contextCreated = (): void => {\n    this.gl = this._createContext();\n    this.props.onContextCreate(this.gl);\n    if (this.canvas) {\n      this.canvas.addEventListener('webglcontextlost', this._contextLost);\n      this.canvas.addEventListener('webglcontextrestored', this._contextRestored);\n    }\n  };\n\n  componentWillUnmount() {\n    if (this.gl) {\n      const loseContextExt = this.gl.getExtension('WEBGL_lose_context');\n      if (loseContextExt) {\n        loseContextExt.loseContext();\n      }\n      this.gl = undefined;\n    }\n    if (this.canvas) {\n      this.canvas.removeEventListener('webglcontextlost', this._contextLost);\n      this.canvas.removeEventListener('webglcontextrestored', this._contextRestored);\n    }\n    window.removeEventListener('resize', this._updateLayout);\n  }\n\n  _updateLayout = (): void => {\n    if (this.container) {\n      const { clientWidth: width = 0, clientHeight: height = 0 } = this.container;\n      this.setState({ width, height });\n    }\n  };\n\n  render() {\n    const { devicePixelRatio = 1 } = window;\n    const { style, ...props } = this.props;\n    const { width, height } = this.state;\n    const domProps = stripNonDOMProps(props);\n\n    const containerStyle: any = StyleSheet.flatten([{ flex: 1 }, style]);\n    return (\n      <div ref={this._assignContainerRef} style={containerStyle}>\n        <canvas\n          ref={this._assignCanvasRef}\n          style={{ flex: 1, width, height }}\n          width={width * devicePixelRatio}\n          height={height * devicePixelRatio}\n          {...domProps}\n        />\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    if (this.canvas && !this._hasContextBeenCreated) {\n      this._hasContextBeenCreated = true;\n      this._contextCreated();\n    }\n  }\n\n  _createContext(): WebGLRenderingContext {\n    const { webglContextAttributes } = this.props;\n    const gl = ensureContext(this.canvas, webglContextAttributes);\n    this._webglContextAttributes = webglContextAttributes || {};\n    return gl;\n  }\n\n  _getGlOrReject(): WebGLRenderingContext {\n    if (!this.gl) {\n      throw new CodedError(\n        'ERR_GL_INVALID',\n        'Attempting to use the GL context before it has been created.'\n      );\n    }\n    return this.gl;\n  }\n\n  _contextLost = (event: Event): void => {\n    event.preventDefault();\n    this.gl = undefined;\n    if (this.props.onContextLost) {\n      this.props.onContextLost();\n    }\n  };\n\n  _contextRestored = (): void => {\n    if (this.props.onContextRestored) {\n      this.gl = this._createContext();\n      this.props.onContextRestored(this.gl);\n    }\n  };\n\n  _assignCanvasRef = (canvas: HTMLCanvasElement): void => {\n    this.canvas = canvas;\n  };\n\n  _assignContainerRef = (element: HTMLElement | null): void => {\n    if (element) {\n      this.container = element;\n    } else {\n      this.container = undefined;\n    }\n    this._updateLayout();\n  };\n\n  async takeSnapshotAsync(options: SnapshotOptions = {}): Promise<GLSnapshot> {\n    if (!GLView.takeSnapshotAsync) {\n      throw new UnavailabilityError('expo-gl', 'takeSnapshotAsync');\n    }\n\n    const gl = this._getGlOrReject();\n\n    return await GLView.takeSnapshotAsync(gl, options);\n  }\n\n  async startARSessionAsync(): Promise<void> {\n    throw new UnavailabilityError('GLView', 'startARSessionAsync');\n  }\n\n  async createCameraTextureAsync(): Promise<void> {\n    throw new UnavailabilityError('GLView', 'createCameraTextureAsync');\n  }\n\n  async destroyObjectAsync(glObject: WebGLObject): Promise<void> {\n    throw new UnavailabilityError('GLView', 'destroyObjectAsync');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}