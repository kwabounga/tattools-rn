{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kwa\\\\projects\\\\tattools-rn\\\\tattools-rn\\\\components\\\\SceneComp3.js\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AssetUtils from \"expo-asset-utils\";\nimport { Asset } from \"react-native-unimodules\";\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { CubeTexture } from \"@babylonjs/core/Materials/Textures/cubeTexture\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\nimport { GLTFLoader } from \"@babylonjs/loaders/glTF/2.0/glTFLoader\";\nimport \"@babylonjs/core/Helpers/sceneHelpers\";\nimport \"@babylonjs/loaders/glTF/2.0/Extensions/KHR_draco_mesh_compression\";\nimport SceneTemplate from \"../SceneTemplate\";\n\nvar SceneComp3 = function (_React$Component) {\n  _inherits(SceneComp3, _React$Component);\n\n  function SceneComp3() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SceneComp3);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SceneComp3)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onInitScene = function _callee(scene) {\n      var CustomParseLoader, CustomMaterialLoader, camera, light, envTexture, urlBRDF, assetBRDF, envBRDFTexture, ms;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              CustomParseLoader = function CustomParseLoader(loader) {\n                loader.onParsedObservable.add(function (data) {});\n              };\n\n              CustomMaterialLoader = function CustomMaterialLoader(loader) {\n                this.name = \"CustomMaterialLoader\";\n                this.enabled = true;\n\n                this.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n                  var promises = [];\n                  var pbrMetallicRoughness = material.pbrMetallicRoughness;\n                  alert(JSON.stringify(material));\n\n                  if (pbrMetallicRoughness) {\n                    if (pbrMetallicRoughness.baseColorTexture) {\n                      alert(\"1 \");\n                      promises.push(loader.loadTextureInfoAsync(context + \"/pbrMetallicRoughness/baseColorTexture\", pbrMetallicRoughness.baseColorTexture, function (babylonTexture) {\n                        alert(\"11\");\n                        babylonMaterial.albedoTexture = null;\n                      }));\n                    }\n\n                    if (pbrMetallicRoughness.metallicRoughnessTexture) {\n                      alert(\"2 \");\n                      promises.push(loader.loadTextureInfoAsync(context + \"/pbrMetallicRoughness/metallicRoughnessTexture\", pbrMetallicRoughness.metallicRoughnessTexture, function (babylonTexture) {\n                        alert(\"21\");\n                        babylonMaterial.metallicTexture = null;\n                      }));\n                    }\n                  }\n\n                  if (material.occlusionTexture) {\n                    alert(\"3 \");\n                    promises.push(loader.loadTextureInfoAsync(context + \"/material/occlusionTexture\", material.occlusionTexture, function (babylonTexture) {\n                      babylonMaterial.ambientTexture = null;\n                    }));\n                  }\n\n                  if (material.normalTexture) {\n                    alert(\"4 \");\n                    promises.push(loader.loadTextureInfoAsync(context + \"/material/normalTexture\", material.normalTexture, function (babylonTexture) {\n                      babylonMaterial.bumpTexture = null;\n                    }));\n                  }\n\n                  if (material.emissiveTexture) {\n                    alert(\"5 \");\n                    promises.push(loader.loadTextureInfoAsync(context + \"/material/emissiveTexture\", material.emissiveTexture, function (babylonTexture) {\n                      babylonMaterial.emissiveTexture = null;\n                    }));\n                  }\n\n                  return Promise.all(promises);\n                };\n              };\n\n              camera = new ArcRotateCamera(\"ArcRotateCamera\", 2, 1.45, 5, new Vector3(0, 0, 0), scene);\n              camera.upperBetaLimit = Math.PI / 2;\n              camera.lowerRadiusLimit = 1;\n              camera.upperRadiusLimit = 25;\n              light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\n              light.intensity = 0.7;\n              envTexture = CubeTexture.CreateFromPrefilteredData(\"https://playground.babylonjs.com/textures/environment.dds\", scene);\n              envTexture.name = \"envTex\";\n              envTexture.gammaSpace = false;\n              scene.environmentTexture = envTexture;\n              urlBRDF = \"https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png\";\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(AssetUtils.resolveAsync(urlBRDF));\n\n            case 15:\n              assetBRDF = _context.sent;\n              envBRDFTexture = Texture.LoadFromDataString(\"image\", assetBRDF, scene, true, true, true, Texture.BILINEAR_SAMPLINGMODE);\n              envBRDFTexture.isRGBD = true;\n              scene.environmentBRDFTexture = envBRDFTexture;\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(SceneLoader.ImportMeshAsync(\"\", \"https://www.babylonjs-playground.com/scenes/BrainStem/\", \"BrainStem.gltf\", scene, null, \".gltf\"));\n\n            case 21:\n              ms = _context.sent.meshes;\n              ms[0].position.y = -0.5;\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SceneComp3, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        }\n      }, React.createElement(SceneTemplate, {\n        onInitScene: this.onInitScene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        }\n      }));\n    }\n  }]);\n\n  return SceneComp3;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 0\n  }\n});\nexport default SceneComp3;","map":{"version":3,"sources":["C:/Users/kwa/projects/tattools-rn/tattools-rn/components/SceneComp3.js"],"names":["React","AssetUtils","Asset","ArcRotateCamera","HemisphericLight","Vector3","CubeTexture","Texture","SceneLoader","GLTFLoader","SceneTemplate","SceneComp3","onInitScene","scene","CustomParseLoader","loader","onParsedObservable","add","data","CustomMaterialLoader","name","enabled","loadMaterialPropertiesAsync","context","material","babylonMaterial","promises","pbrMetallicRoughness","alert","JSON","stringify","baseColorTexture","push","loadTextureInfoAsync","babylonTexture","albedoTexture","metallicRoughnessTexture","metallicTexture","occlusionTexture","ambientTexture","normalTexture","bumpTexture","emissiveTexture","Promise","all","camera","upperBetaLimit","Math","PI","lowerRadiusLimit","upperRadiusLimit","light","intensity","envTexture","CreateFromPrefilteredData","gammaSpace","environmentTexture","urlBRDF","resolveAsync","assetBRDF","envBRDFTexture","LoadFromDataString","BILINEAR_SAMPLINGMODE","isRGBD","environmentBRDFTexture","ImportMeshAsync","ms","meshes","position","y","styles","container","Component","StyleSheet","create","flex","padding"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,SAASC,eAAT,QAAgC,yCAAhC;AACA,SAASC,gBAAT,QAAiC,yCAAjC;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,gDAA5B;AACA,SAASC,OAAT,QAAwB,4CAAxB;AAEA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,UAAT,QAA2B,wCAA3B;AACA,OAAO,sCAAP;AAEA,OAAO,mEAAP;AAEA,OAAOC,aAAP;;IAEMC,U;;;;;;;;;;;;;;;;UACJC,W,GAAc,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,cAAAA,iBADQ,GACY,SAApBA,iBAAoB,CAACC,MAAD,EAAY;AAClCA,gBAAAA,MAAM,CAACC,kBAAP,CAA0BC,GAA1B,CAA8B,UAACC,IAAD,EAAU,CAGvC,CAHD;AAID,eANW;;AAQRC,cAAAA,oBARQ,GAQe,SAAvBA,oBAAuB,CAAUJ,MAAV,EAAkB;AAC3C,qBAAKK,IAAL,GAAY,sBAAZ;AACA,qBAAKC,OAAL,GAAe,IAAf;;AAGA,qBAAKC,2BAAL,GAAmC,UACjCC,OADiC,EAEjCC,QAFiC,EAGjCC,eAHiC,EAIjC;AACA,sBAAIC,QAAQ,GAAG,EAAf;AACA,sBAAIC,oBAAoB,GAAGH,QAAQ,CAACG,oBAApC;AACAC,kBAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAD,CAAL;;AACA,sBAAIG,oBAAJ,EAA0B;AACxB,wBAAIA,oBAAoB,CAACI,gBAAzB,EAA2C;AACzCH,sBAAAA,KAAK,CAAC,IAAD,CAAL;AACAF,sBAAAA,QAAQ,CAACM,IAAT,CACEjB,MAAM,CAACkB,oBAAP,CACEV,OAAO,GAAG,wCADZ,EAEEI,oBAAoB,CAACI,gBAFvB,EAGE,UAAUG,cAAV,EAA0B;AACxBN,wBAAAA,KAAK,CAAC,IAAD,CAAL;AAIAH,wBAAAA,eAAe,CAACU,aAAhB,GAAgC,IAAhC;AACD,uBATH,CADF;AAaD;;AACD,wBAAIR,oBAAoB,CAACS,wBAAzB,EAAmD;AACjDR,sBAAAA,KAAK,CAAC,IAAD,CAAL;AACAF,sBAAAA,QAAQ,CAACM,IAAT,CACEjB,MAAM,CAACkB,oBAAP,CACEV,OAAO,GAAG,gDADZ,EAEEI,oBAAoB,CAACS,wBAFvB,EAGE,UAAUF,cAAV,EAA0B;AACxBN,wBAAAA,KAAK,CAAC,IAAD,CAAL;AAIAH,wBAAAA,eAAe,CAACY,eAAhB,GAAkC,IAAlC;AACD,uBATH,CADF;AAaD;AACF;;AACD,sBAAIb,QAAQ,CAACc,gBAAb,EAA+B;AAC7BV,oBAAAA,KAAK,CAAC,IAAD,CAAL;AACAF,oBAAAA,QAAQ,CAACM,IAAT,CACEjB,MAAM,CAACkB,oBAAP,CACEV,OAAO,GAAG,4BADZ,EAEEC,QAAQ,CAACc,gBAFX,EAGE,UAAUJ,cAAV,EAA0B;AAIxBT,sBAAAA,eAAe,CAACc,cAAhB,GAAiC,IAAjC;AACD,qBARH,CADF;AAYD;;AACD,sBAAIf,QAAQ,CAACgB,aAAb,EAA4B;AAC1BZ,oBAAAA,KAAK,CAAC,IAAD,CAAL;AACAF,oBAAAA,QAAQ,CAACM,IAAT,CACEjB,MAAM,CAACkB,oBAAP,CACEV,OAAO,GAAG,yBADZ,EAEEC,QAAQ,CAACgB,aAFX,EAGE,UAAUN,cAAV,EAA0B;AAIxBT,sBAAAA,eAAe,CAACgB,WAAhB,GAA8B,IAA9B;AACD,qBARH,CADF;AAYD;;AACD,sBAAIjB,QAAQ,CAACkB,eAAb,EAA8B;AAC5Bd,oBAAAA,KAAK,CAAC,IAAD,CAAL;AACAF,oBAAAA,QAAQ,CAACM,IAAT,CACEjB,MAAM,CAACkB,oBAAP,CACEV,OAAO,GAAG,2BADZ,EAEEC,QAAQ,CAACkB,eAFX,EAGE,UAAUR,cAAV,EAA0B;AAIxBT,sBAAAA,eAAe,CAACiB,eAAhB,GAAkC,IAAlC;AACD,qBARH,CADF;AAYD;;AACD,yBAAOC,OAAO,CAACC,GAAR,CAAYlB,QAAZ,CAAP;AACD,iBAxFD;AAyFD,eAtGW;;AA6GNmB,cAAAA,MA7GM,GA6GG,IAAI1C,eAAJ,CACb,iBADa,EAEb,CAFa,EAGb,IAHa,EAIb,CAJa,EAKb,IAAIE,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CALa,EAMbQ,KANa,CA7GH;AAqHZgC,cAAAA,MAAM,CAACC,cAAP,GAAwBC,IAAI,CAACC,EAAL,GAAU,CAAlC;AACAH,cAAAA,MAAM,CAACI,gBAAP,GAA0B,CAA1B;AACAJ,cAAAA,MAAM,CAACK,gBAAP,GAA0B,EAA1B;AAGMC,cAAAA,KA1HM,GA0HE,IAAI/C,gBAAJ,CAAqB,QAArB,EAA+B,IAAIC,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/B,EAAqDQ,KAArD,CA1HF;AA2HZsC,cAAAA,KAAK,CAACC,SAAN,GAAkB,GAAlB;AAGMC,cAAAA,UA9HM,GA8HO/C,WAAW,CAACgD,yBAAZ,CACjB,2DADiB,EAEjBzC,KAFiB,CA9HP;AAkIZwC,cAAAA,UAAU,CAACjC,IAAX,GAAkB,QAAlB;AACAiC,cAAAA,UAAU,CAACE,UAAX,GAAwB,KAAxB;AACA1C,cAAAA,KAAK,CAAC2C,kBAAN,GAA2BH,UAA3B;AAGMI,cAAAA,OAvIM,GAwIV,qEAxIU;AAAA;AAAA,+CAyIYxD,UAAU,CAACyD,YAAX,CAAwBD,OAAxB,CAzIZ;;AAAA;AAyINE,cAAAA,SAzIM;AA0INC,cAAAA,cA1IM,GA0IWrD,OAAO,CAACsD,kBAAR,CACrB,OADqB,EAErBF,SAFqB,EAGrB9C,KAHqB,EAIrB,IAJqB,EAKrB,IALqB,EAMrB,IANqB,EAOrBN,OAAO,CAACuD,qBAPa,CA1IX;AAmJZF,cAAAA,cAAc,CAACG,MAAf,GAAwB,IAAxB;AACAlD,cAAAA,KAAK,CAACmD,sBAAN,GAA+BJ,cAA/B;AApJY;AAAA,+CAuJJpD,WAAW,CAACyD,eAAZ,CACJ,EADI,EAEJ,wDAFI,EAGJ,gBAHI,EAIJpD,KAJI,EAKJ,IALI,EAMJ,OANI,CAvJI;;AAAA;AAsJNqD,cAAAA,EAtJM,iBA+JVC,MA/JU;AAoKZD,cAAAA,EAAE,CAAC,CAAD,CAAF,CAAME,QAAN,CAAeC,CAAf,GAAmB,CAAC,GAApB;;AApKY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BA8KL;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,aAAD;AAAe,QAAA,WAAW,EAAE,KAAK3D,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;;;;EAtLsBZ,KAAK,CAACwE,S;;AAyL/B,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;AAOA,eAAejE,UAAf","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport AssetUtils from \"expo-asset-utils\";\r\n// import { readAsStringAsync } from 'expo-file-system';\r\nimport { Asset } from \"react-native-unimodules\";\r\n\r\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { CubeTexture } from \"@babylonjs/core/Materials/Textures/cubeTexture\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\n\r\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { GLTFLoader } from \"@babylonjs/loaders/glTF/2.0/glTFLoader\";\r\nimport \"@babylonjs/core/Helpers/sceneHelpers\";\r\n// for compressed glb files\r\nimport \"@babylonjs/loaders/glTF/2.0/Extensions/KHR_draco_mesh_compression\";\r\n\r\nimport SceneTemplate from \"../SceneTemplate\";\r\n\r\nclass SceneComp3 extends React.Component {\r\n  onInitScene = async (scene) => {\r\n    var CustomParseLoader = (loader) => {\r\n      loader.onParsedObservable.add((data) => {\r\n        // alert('CustomParseLoader ')\r\n        // alert('1CustomParseLoader ' + JSON.stringify(data.json))\r\n      });\r\n    };\r\n\r\n    var CustomMaterialLoader = function (loader) {\r\n      this.name = \"CustomMaterialLoader\";\r\n      this.enabled = true;\r\n      //alert('CustomMaterialLoader '+ JSON.stringify(loader));\r\n\r\n      this.loadMaterialPropertiesAsync = function (\r\n        context,\r\n        material,\r\n        babylonMaterial\r\n      ) {\r\n        var promises = [];\r\n        var pbrMetallicRoughness = material.pbrMetallicRoughness;\r\n        alert(JSON.stringify(material));\r\n        if (pbrMetallicRoughness) {\r\n          if (pbrMetallicRoughness.baseColorTexture) {\r\n            alert(\"1 \");\r\n            promises.push(\r\n              loader.loadTextureInfoAsync(\r\n                context + \"/pbrMetallicRoughness/baseColorTexture\",\r\n                pbrMetallicRoughness.baseColorTexture,\r\n                function (babylonTexture) {\r\n                  alert(\"11\");\r\n                  // babylonMaterial.albedoTexture = Texture.LoadFromDataString(\"image\", babylonTexture, scene);\r\n                  // const url = 'https://preview.smarteam3d.com/build/image2.jpg';\r\n                  // const asset = await AssetUtils.resolveAsync(url);\r\n                  babylonMaterial.albedoTexture = null; //Texture.LoadFromDataString(\"image\", babylonTexture._buffer, loader.babylonScene, true,true,true, Texture.BILINEAR_SAMPLINGMODE); // Texture.LoadFromDataString(\"image\", babylonTexture._buffer, loader.babylonScene);\r\n                }\r\n              )\r\n            );\r\n          }\r\n          if (pbrMetallicRoughness.metallicRoughnessTexture) {\r\n            alert(\"2 \");\r\n            promises.push(\r\n              loader.loadTextureInfoAsync(\r\n                context + \"/pbrMetallicRoughness/metallicRoughnessTexture\",\r\n                pbrMetallicRoughness.metallicRoughnessTexture,\r\n                function (babylonTexture) {\r\n                  alert(\"21\");\r\n                  // babylonMaterial.albedoTexture = Texture.LoadFromDataString(\"image\", babylonTexture, scene);\r\n                  // const url = 'https://preview.smarteam3d.com/build/image2.jpg';\r\n                  // const asset = await AssetUtils.resolveAsync(url);\r\n                  babylonMaterial.metallicTexture = null; //Texture.LoadFromDataString(\"image\", asset, loader.babylonScene);\r\n                }\r\n              )\r\n            );\r\n          }\r\n        }\r\n        if (material.occlusionTexture) {\r\n          alert(\"3 \");\r\n          promises.push(\r\n            loader.loadTextureInfoAsync(\r\n              context + \"/material/occlusionTexture\",\r\n              material.occlusionTexture,\r\n              function (babylonTexture) {\r\n                // babylonMaterial.albedoTexture = Texture.LoadFromDataString(\"image\", babylonTexture, scene);\r\n                // const url = 'https://preview.smarteam3d.com/build/image2.jpg';\r\n                // const asset = await AssetUtils.resolveAsync(url);\r\n                babylonMaterial.ambientTexture = null; //Texture.LoadFromDataString(\"image\", babylonTexture._buffer, loader.babylonScene, true,true,true, Texture.BILINEAR_SAMPLINGMODE); // Texture.LoadFromDataString(\"image\", babylonTexture._buffer, loader.babylonScene);\r\n              }\r\n            )\r\n          );\r\n        }\r\n        if (material.normalTexture) {\r\n          alert(\"4 \");\r\n          promises.push(\r\n            loader.loadTextureInfoAsync(\r\n              context + \"/material/normalTexture\",\r\n              material.normalTexture,\r\n              function (babylonTexture) {\r\n                // babylonMaterial.albedoTexture = Texture.LoadFromDataString(\"image\", babylonTexture, scene);\r\n                // const url = 'https://preview.smarteam3d.com/build/image2.jpg';\r\n                // const asset = await AssetUtils.resolveAsync(url);\r\n                babylonMaterial.bumpTexture = null; //Texture.LoadFromDataString(\"image\", babylonTexture._buffer, loader.babylonScene, true,true,true, Texture.BILINEAR_SAMPLINGMODE); // Texture.LoadFromDataString(\"image\", babylonTexture._buffer, loader.babylonScene);\r\n              }\r\n            )\r\n          );\r\n        }\r\n        if (material.emissiveTexture) {\r\n          alert(\"5 \");\r\n          promises.push(\r\n            loader.loadTextureInfoAsync(\r\n              context + \"/material/emissiveTexture\",\r\n              material.emissiveTexture,\r\n              function (babylonTexture) {\r\n                // babylonMaterial.albedoTexture = Texture.LoadFromDataString(\"image\", babylonTexture, scene);\r\n                // const url = 'https://preview.smarteam3d.com/build/image2.jpg';\r\n                // const asset = await AssetUtils.resolveAsync(url);\r\n                babylonMaterial.emissiveTexture = null; //Texture.LoadFromDataString(\"image\", babylonTexture._buffer, loader.babylonScene, true,true,true, Texture.BILINEAR_SAMPLINGMODE); // Texture.LoadFromDataString(\"image\", babylonTexture._buffer, loader.babylonScene);\r\n              }\r\n            )\r\n          );\r\n        }\r\n        return Promise.all(promises);\r\n      };\r\n    };\r\n\r\n    // GLTFLoader.RegisterExtension(\"CustomMaterialLoader\", function (loader) { return new CustomMaterialLoader(loader); });\r\n    // SceneLoader.OnPlugnActivatedObservable.addOnce(function (loader) { return new CustomParseLoader(loader); });\r\n    // SceneLoader.CleanBoneMatrixWeights = true;\r\n\r\n    // This creates and positions an arcRotate camera\r\n    const camera = new ArcRotateCamera(\r\n      \"ArcRotateCamera\",\r\n      2,\r\n      1.45,\r\n      5,\r\n      new Vector3(0, 0, 0),\r\n      scene\r\n    );\r\n    camera.upperBetaLimit = Math.PI / 2;\r\n    camera.lowerRadiusLimit = 1;\r\n    camera.upperRadiusLimit = 25;\r\n\r\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n    const light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\r\n    light.intensity = 0.7;\r\n\r\n    // Add the environment manually, instead of createDefaultEnvironment function\r\n    const envTexture = CubeTexture.CreateFromPrefilteredData(\r\n      \"https://playground.babylonjs.com/textures/environment.dds\",\r\n      scene\r\n    );\r\n    envTexture.name = \"envTex\";\r\n    envTexture.gammaSpace = false;\r\n    scene.environmentTexture = envTexture;\r\n\r\n    // Add environmentBRDFTexture to avoid calling GetEnvironmentBRDFTexture internally- use Image tag\r\n    const urlBRDF =\r\n      \"https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png\";\r\n    const assetBRDF = await AssetUtils.resolveAsync(urlBRDF);\r\n    const envBRDFTexture = Texture.LoadFromDataString(\r\n      \"image\",\r\n      assetBRDF,\r\n      scene,\r\n      true,\r\n      true,\r\n      true,\r\n      Texture.BILINEAR_SAMPLINGMODE\r\n    );\r\n    envBRDFTexture.isRGBD = true;\r\n    scene.environmentBRDFTexture = envBRDFTexture;\r\n\r\n    const ms = (\r\n      await SceneLoader.ImportMeshAsync(\r\n        \"\",\r\n        \"https://www.babylonjs-playground.com/scenes/BrainStem/\",\r\n        \"BrainStem.gltf\",\r\n        scene,\r\n        null,\r\n        \".gltf\"\r\n      )\r\n    ).meshes;\r\n    // const ms = (await SceneLoader.ImportMeshAsync('', \"https://www.babylonjs-playground.com/scenes/BrainStem/\", \"BrainStem.gltf\", scene, null, '.gltf')).meshes;\r\n    // const ms = (await SceneLoader.ImportMeshAsync('', \"https://models.babylonjs.com/shaderBall/\", \"BabylonShaderBall_Simple.gltf\", scene, null, '.gltf')).meshes;\r\n    // const ms = (await SceneLoader.ImportMeshAsync('', \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/BoxTextured/glTF/\", \"BoxTextured.gltf\", scene, null, '.gltf')).meshes;\r\n    // alert(ms);\r\n    ms[0].position.y = -0.5;\r\n\r\n    // Load glb/gltf from local folder\r\n    // const glb = Asset.fromModule(require('./assets/character.glb'));\r\n    // await glb.downloadAsync();\r\n    // alert(JSON.stringify(glb))\r\n    // const asset2 = await AssetUtils.resolveAsync(glb.localUri);\r\n    // alert(JSON.stringify(asset2))\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        {/* <Text>{this.props.name}</Text> */}\r\n        <SceneTemplate onInitScene={this.onInitScene} />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 0,\r\n  },\r\n});\r\n\r\nexport default SceneComp3;\r\n"]},"metadata":{},"sourceType":"module"}